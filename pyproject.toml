[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "xsstrike"
description = "Advanced XSS Detection Suite with AI/RAG capabilities"
readme = "README.md"
license = { text = "GPL-3.0" }
authors = [
    { name = "s0md3v", email = "s0md3v@protonmail.ch" },
]
maintainers = [
    { name = "XSStrike Team" },
]
keywords = ["xss", "security", "web", "vulnerability", "scanner", "ai", "rag"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Testing",
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.28.0",
    "tld>=0.12.6",
    "fuzzywuzzy>=0.18.0",
    "numpy>=1.21.0",
    "scikit-learn>=1.1.0",
    "joblib>=1.2.0",
    "urllib3>=1.26.12",
    "python-Levenshtein>=0.20.0",
    "packaging>=21.0",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
    "responses>=0.21.0",
]

[project.scripts]
xsstrike = "xsstrike:main"

[project.urls]
Homepage = "https://github.com/s0md3v/XSStrike"
Repository = "https://github.com/s0md3v/XSStrike"
Documentation = "https://github.com/s0md3v/XSStrike/wiki"
"Bug Tracker" = "https://github.com/s0md3v/XSStrike/issues"

[tool.setuptools_scm]
write_to = "xsstrike/_version.py"

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "modes*", "plugins*", "interfaces*"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "fuzzywuzzy.*",
    "sklearn.*",
    "joblib.*",
    "tld.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["core", "modes", "plugins", "interfaces"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstract",
]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["core", "modes", "plugins", "interfaces"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
